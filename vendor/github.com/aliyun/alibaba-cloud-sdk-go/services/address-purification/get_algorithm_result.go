package address_purification

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// GetAlgorithmResult invokes the address_purification.GetAlgorithmResult API synchronously
// api document: https://help.aliyun.com/api/address-purification/getalgorithmresult.html
func (client *Client) GetAlgorithmResult(request *GetAlgorithmResultRequest) (response *GetAlgorithmResultResponse, err error) {
	response = CreateGetAlgorithmResultResponse()
	err = client.DoAction(request, response)
	return
}

// GetAlgorithmResultWithChan invokes the address_purification.GetAlgorithmResult API asynchronously
// api document: https://help.aliyun.com/api/address-purification/getalgorithmresult.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) GetAlgorithmResultWithChan(request *GetAlgorithmResultRequest) (<-chan *GetAlgorithmResultResponse, <-chan error) {
	responseChan := make(chan *GetAlgorithmResultResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.GetAlgorithmResult(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// GetAlgorithmResultWithCallback invokes the address_purification.GetAlgorithmResult API asynchronously
// api document: https://help.aliyun.com/api/address-purification/getalgorithmresult.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) GetAlgorithmResultWithCallback(request *GetAlgorithmResultRequest, callback func(response *GetAlgorithmResultResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *GetAlgorithmResultResponse
		var err error
		defer close(result)
		response, err = client.GetAlgorithmResult(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// GetAlgorithmResultRequest is the request struct for api GetAlgorithmResult
type GetAlgorithmResultRequest struct {
	*requests.RpcRequest
	ServiceCode string `position:"Body" name:"ServiceCode"`
	ApiCode     string `position:"Body" name:"ApiCode"`
	Parameters  string `position:"Body" name:"Parameters"`
}

// GetAlgorithmResultResponse is the response struct for api GetAlgorithmResult
type GetAlgorithmResultResponse struct {
	*responses.BaseResponse
	RequestId  string `json:"RequestId" xml:"RequestId"`
	Success    bool   `json:"Success" xml:"Success"`
	Code       string `json:"Code" xml:"Code"`
	ErrMessage string `json:"ErrMessage" xml:"ErrMessage"`
	Data       string `json:"Data" xml:"Data"`
}

// CreateGetAlgorithmResultRequest creates a request to invoke GetAlgorithmResult API
func CreateGetAlgorithmResultRequest() (request *GetAlgorithmResultRequest) {
	request = &GetAlgorithmResultRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("address-purification", "2019-11-18", "GetAlgorithmResult", "", "")
	return
}

// CreateGetAlgorithmResultResponse creates a response to parse from GetAlgorithmResult response
func CreateGetAlgorithmResultResponse() (response *GetAlgorithmResultResponse) {
	response = &GetAlgorithmResultResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
