package address_purification

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// GetConsoleResult invokes the address_purification.GetConsoleResult API synchronously
// api document: https://help.aliyun.com/api/address-purification/getconsoleresult.html
func (client *Client) GetConsoleResult(request *GetConsoleResultRequest) (response *GetConsoleResultResponse, err error) {
	response = CreateGetConsoleResultResponse()
	err = client.DoAction(request, response)
	return
}

// GetConsoleResultWithChan invokes the address_purification.GetConsoleResult API asynchronously
// api document: https://help.aliyun.com/api/address-purification/getconsoleresult.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) GetConsoleResultWithChan(request *GetConsoleResultRequest) (<-chan *GetConsoleResultResponse, <-chan error) {
	responseChan := make(chan *GetConsoleResultResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.GetConsoleResult(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// GetConsoleResultWithCallback invokes the address_purification.GetConsoleResult API asynchronously
// api document: https://help.aliyun.com/api/address-purification/getconsoleresult.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) GetConsoleResultWithCallback(request *GetConsoleResultRequest, callback func(response *GetConsoleResultResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *GetConsoleResultResponse
		var err error
		defer close(result)
		response, err = client.GetConsoleResult(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// GetConsoleResultRequest is the request struct for api GetConsoleResult
type GetConsoleResultRequest struct {
	*requests.RpcRequest
	ProductCode   string `position:"Body" name:"ProductCode"`
	ApiCode       string `position:"Body" name:"ApiCode"`
	CommodityCode string `position:"Body" name:"CommodityCode"`
	Parameters    string `position:"Body" name:"Parameters"`
}

// GetConsoleResultResponse is the response struct for api GetConsoleResult
type GetConsoleResultResponse struct {
	*responses.BaseResponse
	RequestId  string `json:"RequestId" xml:"RequestId"`
	ErrCode    string `json:"ErrCode" xml:"ErrCode"`
	ErrMessage string `json:"ErrMessage" xml:"ErrMessage"`
	Data       string `json:"Data" xml:"Data"`
}

// CreateGetConsoleResultRequest creates a request to invoke GetConsoleResult API
func CreateGetConsoleResultRequest() (request *GetConsoleResultRequest) {
	request = &GetConsoleResultRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("address-purification", "2019-11-18", "GetConsoleResult", "", "")
	return
}

// CreateGetConsoleResultResponse creates a response to parse from GetConsoleResult response
func CreateGetConsoleResultResponse() (response *GetConsoleResultResponse) {
	response = &GetConsoleResultResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
