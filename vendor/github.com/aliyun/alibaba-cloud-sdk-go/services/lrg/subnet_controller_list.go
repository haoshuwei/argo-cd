package lrg

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// SubnetControllerList invokes the lrg.SubnetControllerList API synchronously
// api document: https://help.aliyun.com/api/lrg/subnetcontrollerlist.html
func (client *Client) SubnetControllerList(request *SubnetControllerListRequest) (response *SubnetControllerListResponse, err error) {
	response = CreateSubnetControllerListResponse()
	err = client.DoAction(request, response)
	return
}

// SubnetControllerListWithChan invokes the lrg.SubnetControllerList API asynchronously
// api document: https://help.aliyun.com/api/lrg/subnetcontrollerlist.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) SubnetControllerListWithChan(request *SubnetControllerListRequest) (<-chan *SubnetControllerListResponse, <-chan error) {
	responseChan := make(chan *SubnetControllerListResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.SubnetControllerList(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// SubnetControllerListWithCallback invokes the lrg.SubnetControllerList API asynchronously
// api document: https://help.aliyun.com/api/lrg/subnetcontrollerlist.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) SubnetControllerListWithCallback(request *SubnetControllerListRequest, callback func(response *SubnetControllerListResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *SubnetControllerListResponse
		var err error
		defer close(result)
		response, err = client.SubnetControllerList(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// SubnetControllerListRequest is the request struct for api SubnetControllerList
type SubnetControllerListRequest struct {
	*requests.RoaRequest
	BigRegionName string `position:"Body" name:"big_region_name"`
	Status        string `position:"Body" name:"Status"`
}

// SubnetControllerListResponse is the response struct for api SubnetControllerList
type SubnetControllerListResponse struct {
	*responses.BaseResponse
	Code    int                      `json:"code" xml:"code"`
	Message string                   `json:"message" xml:"message"`
	Success bool                     `json:"success" xml:"success"`
	Data    []map[string]interface{} `json:"data" xml:"data"`
}

// CreateSubnetControllerListRequest creates a request to invoke SubnetControllerList API
func CreateSubnetControllerListRequest() (request *SubnetControllerListRequest) {
	request = &SubnetControllerListRequest{
		RoaRequest: &requests.RoaRequest{},
	}
	request.InitWithApiInfo("LRG", "2019-10-10", "SubnetControllerList", "/api/v2/gw/xgw/subnet?action=list", "", "")
	request.Method = requests.POST
	return
}

// CreateSubnetControllerListResponse creates a response to parse from SubnetControllerList response
func CreateSubnetControllerListResponse() (response *SubnetControllerListResponse) {
	response = &SubnetControllerListResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
